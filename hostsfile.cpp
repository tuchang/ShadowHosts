#include <string>
#include <fstream>
#include <sqlite++/db.hpp>
#include <sqlite++/stmt.hpp>
#include <sqlite++/row.hpp>
#include <sqlite++/exception.hpp>
#include "hostsfile.h"

HostsFile::HostsFile(): SQLite::DB(":memory:")
{
    open();
    execute("CREATE TABLE entries("
            "ip TEXT NOT NULL, "
            "hostname TEXT NOT NULL UNIQUE CHECK(hostname IS NOT 'localhost' AND hostname IS NOT 'localhost.localdomain')"
            ")");
}

HostsFile::~HostsFile() { close(); }

void HostsFile::saveToFile(const std::string &loc) {
    std::ofstream hosts(loc);

    if (hosts.fail())
        throw std::invalid_argument(loc);

    SQLite::Stmt select = prepare("SELECT ip, hostname FROM entries ORDER BY hostname ASC");

    // Banner message at top
    hosts << "#####################################################################\n"
             "# This file was automatically generated by ShadowHosts by Shadow53. #\n"
             "# Do not modify this file directly. If you want to add, modify, or  #\n"
             "# remove an entry, do so using the ShadowHosts tool.                #\n"
             "# See https://shadow53.com/hosts-editor/ for more information.      #\n"
             "#####################################################################\n"
             "\n"
             "127.0.0.1 localhost localhost.localdomain\n";

    select.exec([&hosts](SQLite::Row &row) mutable -> void {
        try {
            hosts << row.getString(0) << ' ' << row.getString(1) << '\n';
        }
        catch (SQLite::except::SQLiteError &e) {
            //Halp
        }
    });

    hosts.close();

    if (hosts.fail())
        throw std::invalid_argument("An error occurred while closing the file.");
}

void HostsFile::insert(const std::string &ip, const std::string &hostname) {
    try {
        SQLite::Stmt insert = prepare("INSERT INTO entries(ip, hostname) VALUES(:ip, :host)");
        insert.bindValue(":ip", ip);
        insert.bindValue(":host", hostname);
        insert.exec();
    }
    catch (SQLite::except::Constraint &e) {
        // Absorb UNIQUE constraint failures
        if (!e.unique()) throw e;
    }
}

void HostsFile::replace(const std::string &ip, const std::string &hostname) {
    SQLite::Stmt replace = prepare("INSERT OR REPLACE INTO entries(ip, hostname) VALUES(:ip, :host)");
    replace.bindValue(":ip", ip);
    replace.bindValue(":host", hostname);
    replace.exec();
}

void HostsFile::remove(const std::string &hostname) {
    SQLite::Stmt remove = prepare("DELETE FROM entries WHERE hostname = :host");
    remove.bindValue(":host", hostname);
    remove.exec();
}
